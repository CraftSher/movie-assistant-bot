from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from MovieAssistantBot.bot.states import SearchByDateState
from MovieAssistantBot.bot.keyboards import menu_keyboard
from MovieAssistantBot.bot.config import TMDB_API_KEY
from MovieAssistantBot.database.db import save_history
from MovieAssistantBot.bot.states import SearchByGenreState
import aiohttp

GENRE_MAP = {
    "–±–æ–µ–≤–∏–∫": 28,
    "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": 12,
    "–º—É–ª—å—Ç—Ñ–∏–ª—å–º": 16,
    "–∫–æ–º–µ–¥–∏—è": 35,
    "–∫—Ä–∏–º–∏–Ω–∞–ª": 80,
    "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π": 99,
    "–¥—Ä–∞–º–∞": 18,
    "—Å–µ–º–µ–π–Ω—ã–π": 10751,
    "—Ñ—ç–Ω—Ç–µ–∑–∏": 14,
    "–∏—Å—Ç–æ—Ä–∏—è": 36,
    "—É–∂–∞—Å—ã": 27,
    "–º—É–∑—ã–∫–∞": 10402,
    "–¥–µ—Ç–µ–∫—Ç–∏–≤": 9648,
    "–º–µ–ª–æ–¥—Ä–∞–º–∞": 10749,
    "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": 878,
    "—Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω—ã–π —Ñ–∏–ª—å–º": 10770,
    "—Ç—Ä–∏–ª–ª–µ—Ä": 53,
    "–≤–æ–µ–Ω–Ω—ã–π": 10752,
    "–≤–µ—Å—Ç–µ—Ä–Ω": 37
}

def genre_handlers(dp: Dispatcher):
    @dp.message(lambda m: m.text == "–ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É")
    async def ask_genre(message: Message, state: FSMContext):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:\n" + ", ".join(GENRE_MAP.keys()))
        await state.set_state(SearchByGenreState.waiting_for_genre)

    @dp.message(SearchByGenreState.waiting_for_genre)
    async def process_genre(message: Message, state: FSMContext):
        genre_name = message.text.strip().lower()
        genre_id = GENRE_MAP.get(genre_name)

        if not genre_id:
            await message.answer("‚õî –ñ–∞–Ω—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:\n" + ", ".join(GENRE_MAP.keys()))
            return

        await state.clear()
        await save_history(message.from_user.id, "genre", genre_name)

        url = "https://api.themoviedb.org/3/discover/movie"
        params = {
            "api_key": TMDB_API_KEY,
            "language": "ru-RU",
            "sort_by": "popularity.desc",
            "with_genres": genre_id,
            "page": 1
        }

        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                data = await response.json()
                results = data.get("results", [])

                if not results:
                    await message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòï", reply_markup=menu_keyboard)
                    return

                for movie in results[:5]:
                    title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                    release_date = movie.get("release_date", "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                    rating = movie.get("vote_average", "‚Äî")
                    poster_path = movie.get("poster_path")

                    text = f"<b>{title}</b>\nüìÖ <i>{release_date}</i>\n‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}\n\n{overview}"
                    if poster_path:
                        photo_url = f"https://image.tmdb.org/t/p/w500{poster_path}"
                        await message.answer_photo(photo=photo_url, caption=text[:1024], reply_markup=menu_keyboard)
                    else:
                        await message.answer(text, reply_markup=menu_keyboard)
